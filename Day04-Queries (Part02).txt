-- Figure 15-06a
IF OBJECT_ID('spInvCount') IS NOT NULL
    DROP PROC spInvCount;
GO

CREATE PROC spInvCount
       @DateVar smalldatetime = NULL,
       @VendorVar varchar(40) = '%'
AS

IF @DateVar IS NULL
   SELECT @DateVar = MIN(InvoiceDate) FROM Invoices;

DECLARE @InvCount int;

SELECT @InvCount = COUNT(InvoiceID)
FROM Invoices JOIN Vendors
    ON Invoices.VendorID = Vendors.VendorID
WHERE (InvoiceDate >= @DateVar) AND
       (VendorName LIKE @VendorVar);

RETURN @InvCount;

-- Figure 15-06b
DECLARE @InvCount int;
EXEC @InvCount = spInvCount '2016-02-01', 'P%'; -- we capture procedure in to a variable
PRINT 'Invoice count: ' + CONVERT(varchar, @InvCount);

-----------------------------------------------------------------------------------------------------------------

-- Figure 15-07a (VERY IMPORTANT)
IF OBJECT_ID('spInsertInvoice') IS NOT NULL
    DROP PROC spInsertInvoice;
GO
-- for those values that we guess we don't put them down below
CREATE PROC spInsertInvoice
       @VendorID    int,           @InvoiceNumber  varchar(50), --invoiceID is auto generated we don't provide value,
       @InvoiceDate smalldatetime, @InvoiceTotal   money,
       @TermsID     int,           @InvoiceDueDate smalldatetime
AS

IF EXISTS(SELECT * FROM Vendors WHERE VendorID = @VendorID)
    INSERT Invoices
    VALUES (@VendorID, @InvoiceNumber,
            @InvoiceDate, @InvoiceTotal, 0, 0,
            @TermsID, @InvoiceDueDate, NULL);
ELSE 
    THROW 50001, 'Not a valid VendorID!', 1;


select * from Invoices
--run the procedure
-- try to run with correct vendor id: 1
EXEC spInsertInvoice 
         1,'ZXK-799','2016-05-01',299.95,1,'2016-06-01'; --when executing it adds it to the invoices table

--try to run with incorrect vendor id: 799
EXEC spInsertInvoice 
    799,'ZXK-799','2016-05-01',299.95,1,'2016-06-01'; --gives an error at runtime 50001, because vendor id 799 does nor exist

-- So we use try catch block to do this procedure. to show custom error message:
-- Figure 15-07b
BEGIN TRY
    EXEC spInsertInvoice 
         799,'ZXK-799','2016-05-01',299.95,1,'2016-06-01';
END TRY
BEGIN CATCH
    PRINT 'An error occurred.';
    PRINT 'Message: ' + CONVERT(varchar, ERROR_MESSAGE());
    IF ERROR_NUMBER() >= 50000
        PRINT 'This is a custom error message.';
END CATCH;

-----------------------------------------------------------------------------------------------------------------


-- Figure 15-08a (VERY GOOD EXAMPLE OF A PROCEDURE)
/*
Handles insertion of new invoices into AP database,
including data validation.
Author:         Bryan Syverson
Created:        2002-07-17
Modified:       2008-07-29 by Joel Murach
                2012-05-09 by Anne Boehm
Return value:   InvoiceID for the new row if successful, 
                0 if unsuccessful
*/
USE AP;
GO

IF OBJECT_ID('spInsertInvoice') IS NOT NULL
    DROP PROC spInsertInvoice;
GO

CREATE PROC spInsertInvoice
       @VendorID       int = NULL,
       @InvoiceNumber  varchar(50) = NULL,
       @InvoiceDate    smalldatetime = NULL,
       @InvoiceTotal   money = NULL,
       @PaymentTotal   money = NULL,
       @CreditTotal    money = NULL,
       @TermsID        int = NULL,
       @InvoiceDueDate smalldatetime = NULL,
       @PaymentDate    smalldatetime = NULL
AS

--if @VendorID is NUll
--Throw 50001, 'Invalid VendorID.', 1; --This one and below one is the same
IF NOT EXISTS (SELECT * FROM Vendors WHERE VendorID = @VendorID)
    THROW 50001, 'Invalid VendorID.', 1; --throw exception if run terminaate the run
IF @InvoiceNumber IS NULL
    THROW 50001, 'Invalid InvoiceNumber.', 1;
IF @InvoiceDate IS NULL OR @InvoiceDate > GETDATE() 
        OR DATEDIFF(dd, @InvoiceDate, GETDATE()) > 30
    THROW 50001, 'Invalid InvoiceDate.', 1;
IF @InvoiceTotal IS NULL OR @InvoiceTotal <= 0
    THROW 50001, 'Invalid InvoiceTotal.', 1;
IF @PaymentTotal IS NULL
    SET @PaymentTotal = 0;
IF @CreditTotal IS NULL
    SET @CreditTotal = 0;
IF @CreditTotal > @InvoiceTotal
    THROW 50001, 'Invalid CreditTotal.', 1;
IF @PaymentTotal > @InvoiceTotal - @CreditTotal
    THROW 50001, 'Invalid PaymentTotal.', 1;
IF NOT EXISTS (SELECT * FROM Terms WHERE TermsID = @TermsID)
    IF @TermsID IS NULL
        SELECT @TermsID = DefaultTermsID
        FROM Vendors
        WHERE VendorID = @VendorID;
    ELSE  -- @TermsID IS NOT NULL
        THROW 50001, 'Invalid TermsID.', 1;
IF @InvoiceDueDate IS NULL
    SET @InvoiceDueDate = @InvoiceDate +
        (SELECT TermsDueDays FROM Terms WHERE TermsID = @TermsID);
ELSE  -- @InvoiceDueDate IS NOT NULL
    IF @InvoiceDueDate < @InvoiceDate OR
            DATEDIFF(dd, @InvoiceDueDate, @InvoiceDate) > 180
        THROW 50001, 'Invalid InvoiceDueDate.', 1;
IF @PaymentDate < @InvoiceDate OR
        DATEDIFF(dd, @PaymentDate, GETDATE()) > 14
    THROW 50001, 'Invalid PaymentDate.', 1;

INSERT Invoices
VALUES (@VendorID, @InvoiceNumber, @InvoiceDate, @InvoiceTotal,
        @PaymentTotal, @CreditTotal, @TermsID, @InvoiceDueDate, 
        @PaymentDate);
RETURN @@IDENTITY;

-- Figure 15-08b
/*
Handles insertion of new invoices into AP database,
including data validation.
Author:         Bryan Syverson
Created:        2002-07-17
Modified:       2008-07-29 by Joel Murach
                2012-05-09 by Anne Boehm
Return value:   InvoiceID for the new row if successful, 
                0 if unsuccessful
*/
USE AP;
GO

IF OBJECT_ID('spInsertInvoice') IS NOT NULL
    DROP PROC spInsertInvoice;
GO

CREATE PROC spInsertInvoice
       @VendorID       int = NULL,
       @InvoiceNumber  varchar(50) = NULL,
       @InvoiceDate    smalldatetime = NULL,
       @InvoiceTotal   money = NULL,
       @PaymentTotal   money = NULL,
       @CreditTotal    money = NULL,
       @TermsID        int = NULL,
       @InvoiceDueDate smalldatetime = NULL,
       @PaymentDate    smalldatetime = NULL
AS

IF NOT EXISTS (SELECT * FROM Vendors WHERE VendorID = @VendorID)
    THROW 50001, 'Invalid VendorID.', 1;
IF @InvoiceNumber IS NULL
    THROW 50001, 'Invalid InvoiceNumber.', 1;
IF @InvoiceDate IS NULL OR @InvoiceDate > GETDATE() 
        OR DATEDIFF(dd, @InvoiceDate, GETDATE()) > 30
    THROW 50001, 'Invalid InvoiceDate.', 1;
IF @InvoiceTotal IS NULL OR @InvoiceTotal <= 0
    THROW 50001, 'Invalid InvoiceTotal.', 1;
IF @PaymentTotal IS NULL
    SET @PaymentTotal = 0;
IF @CreditTotal IS NULL
    SET @CreditTotal = 0;
IF @CreditTotal > @InvoiceTotal
    THROW 50001, 'Invalid CreditTotal.', 1;
IF @PaymentTotal > @InvoiceTotal - @CreditTotal
    THROW 50001, 'Invalid PaymentTotal.', 1;
IF NOT EXISTS (SELECT * FROM Terms WHERE TermsID = @TermsID)
    IF @TermsID IS NULL
        SELECT @TermsID = DefaultTermsID
        FROM Vendors
        WHERE VendorID = @VendorID;
    ELSE  -- @TermsID IS NOT NULL
        THROW 50001, 'Invalid TermsID.', 1;
IF @InvoiceDueDate IS NULL
    SET @InvoiceDueDate = @InvoiceDate +
        (SELECT TermsDueDays FROM Terms WHERE TermsID = @TermsID);
ELSE  -- @InvoiceDueDate IS NOT NULL
    IF @InvoiceDueDate < @InvoiceDate OR
            DATEDIFF(dd, @InvoiceDueDate, @InvoiceDate) > 180
        THROW 50001, 'Invalid InvoiceDueDate.', 1;
IF @PaymentDate < @InvoiceDate OR
        DATEDIFF(dd, @PaymentDate, GETDATE()) > 14
    THROW 50001, 'Invalid PaymentDate.', 1;

INSERT Invoices
VALUES (@VendorID, @InvoiceNumber, @InvoiceDate, @InvoiceTotal,
        @PaymentTotal, @CreditTotal, @TermsID, @InvoiceDueDate, 
        @PaymentDate);
RETURN @@IDENTITY;

-----------------------------------------------------------------------------------------------------------------
--More Advanced Stuff
-- Figure 15-09a
-- drop stored procedure if it exists already
IF OBJECT_ID('spInsertLineItems') IS NOT NULL
    DROP PROC spInsertLineItems;
GO

-- drop table type if it exists already
IF  EXISTS (SELECT * FROM sys.types WHERE name = 'LineItems')
    DROP TYPE LineItems;
GO

-- create the user-defined table type named LineItems
CREATE TYPE LineItems AS
TABLE
(InvoiceID        INT           NOT NULL,
InvoiceSequence   SMALLINT      NOT NULL,
AccountNo         INT           NOT NULL,
ItemAmount        MONEY         NOT NULL,
ItemDescription   VARCHAR(100)  NOT NULL,
PRIMARY KEY (InvoiceID, InvoiceSequence));

GO

-- create a stored procedure that accepts the LineItems type
CREATE PROC spInsertLineItems
    @LineItems LineItems READONLY
AS
    INSERT INTO InvoiceLineItems
    SELECT *
    FROM @LineItems;

GO


-- Figure 15-09b
-- delete old line item data
DELETE FROM InvoiceLineItems WHERE InvoiceID = 114;

-- declare a variable for the LineItems type
DECLARE @LineItems LineItems;

-- insert rows into the LineItems variable
INSERT INTO @LineItems VALUES (114, 1, 553, 127.75, 'Freight');
INSERT INTO @LineItems VALUES (114, 2, 553, 29.25, 'Freight');
INSERT INTO @LineItems VALUES (114, 3, 553, 48.50, 'Freight');

-- execute the stored procedure
EXEC spInsertLineItems @LineItems;



-- Figure 15-09c
-- view the data
SELECT * FROM InvoiceLineItems WHERE InvoiceID = 114;




-- Figure 15-10a
IF OBJECT_ID('spVendorState') IS NOT NULL
    DROP PROC spVendorState;
GO

CREATE PROC spVendorState
       @State varchar(20)
AS
SELECT VendorName
FROM Vendors
WHERE VendorState = @State;



-- Figure 15-10b
ALTER PROC spVendorState
      @State varchar(20) = NULL
AS
IF @State IS NULL
   SELECT VendorName
   FROM Vendors;
ELSE
   SELECT VendorName
   FROM Vendors
   WHERE VendorState = @State;



-- Figure 15-10c
DROP PROC spVendorState;



-- Figure 15-11
EXEC sp_HelpText spInvoiceReport;


