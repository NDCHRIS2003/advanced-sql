--FUNCTIONS
--Dunctions are all saved in database in programmability folder
-- Figure 15-12a
IF OBJECT_ID('fnVendorID') IS NOT NULL
    DROP FUNCTION fnVendorID;
GO

CREATE FUNCTION fnVendorID
    (@VendorName varchar(50))
    RETURNS int
BEGIN
    RETURN (SELECT VendorID FROM Vendors WHERE VendorName = @VendorName);
END;

print dbo.fnVendorID('IBM') --dbo is needed to invoke the function

-- Figure 15-12b
SELECT InvoiceDate, InvoiceTotal, VendorID
FROM Invoices
WHERE VendorID = dbo.fnVendorID('IBM');

-----------------------------------------------------------------------------------------------------------

-- Figure 15-13a

IF OBJECT_ID('fnBalanceDue') IS NOT NULL
    DROP FUNCTION fnBalanceDue;
GO

CREATE FUNCTION fnBalanceDue()
    RETURNS money --you can use this function but ensure to have number of type money is returned
BEGIN
    RETURN (SELECT SUM(InvoiceTotal - PaymentTotal - CreditTotal)
            FROM Invoices
            WHERE InvoiceTotal - PaymentTotal - CreditTotal > 0);

END;

-- Figure 15-13b --Calling Mehod 2:
PRINT 'Balance due: $' + dbo.fnBalanceDue() --type money will be returned. you cannot add up string with money type

PRINT 'Balance due: ' + format(dbo.fnBalanceDue() , 'c')

PRINT 'Balance due: $' + CONVERT(varchar, dbo.fnBalanceDue(), 1);

-- Calling function Method 1:
declare @result money = dbo.fnBalanceDue()
PRINT 'Balance due: $' + format(@result , 'c')

-----------------------------------------------------------------------------------------------------------
-- function that calls another function

-- create a function that calculates amount due
-- (invoice total - payment total - credit total)
--for an invoice
--we assime invoice exists

create function fnInvoiceAmountDue
	(@InvoiceID int)
	returns money
begin
	return(select InvoiceTotal - CreditTotal - PaymentTotal
			from Invoices
			where InvoiceID = @InvoiceID);
end

print dbo.fnInvoiceAmountDue(12)

select * from Invoices 
where InvoiceTotal - PaymentTotal - CreditTotal > 0

print dbo.fnInvoiceAmountDue(89)

-- create function that get a vendor id and calculates
-- how much a particular vedor owe
-- idea: go through invoices of the this vendor and call the previous function
create function fnVendorBalance (@VendorID int)
	returns money
begin
	return (select sum(dbo.fnInvoiceAmountDue(InvoiceID)) --make sure you put dbo in front of function when callling
			from Invoices
			where VendorID = @VendorID
			);
end

print dbo.fnVendorBalance(123)

--check it
select sum(InvoiceTotal - PaymentTotal - CreditTotal)
from Invoices
where VendorID = 123

-----------------------------------------------------------------------------------------------------------
